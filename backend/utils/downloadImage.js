const axios = require('axios');
const fs = require('fs');
const path = require('path');

/**
 * ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ‡πÉ‡∏ô server
 * @param {string} url - URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
 * @param {string} filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ã‡∏ü
 * @returns {Promise<string>} - Path ‡∏ó‡∏µ‡πà public ‡πÑ‡∏î‡πâ
 */
async function downloadImage(url, filename) {
  try {
    console.log('üîç Downloading image from:', url);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    const uploadDir = path.join(__dirname, '../uploads/profiles');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    const filePath = path.join(uploadDir, filename);
    
    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
    const response = await axios({
      url,
      method: 'GET',
      responseType: 'stream',
      timeout: 10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content type
    const contentType = response.headers['content-type'];
    if (!contentType || !contentType.startsWith('image/')) {
      throw new Error(`Invalid content type: ${contentType}`);
    }

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log('‚úÖ Image downloaded successfully:', filePath);
        resolve(`/uploads/profiles/${filename}`);
      });
      writer.on('error', (error) => {
        console.error('‚ùå Error writing file:', error);
        reject(error);
      });
    });
  } catch (error) {
    console.error('‚ùå Error downloading image:', error.message);
    throw error;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå Google ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} url - URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {boolean}
 */
function isGoogleProfilePicture(url) {
  return url && url.startsWith('https://lh3.googleusercontent.com/');
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
 * @param {string} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} googleId - Google ID (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * @returns {string}
 */
function generateProfileFilename(userId, googleId = null) {
  const timestamp = Date.now();
  const id = googleId || userId;
  return `profile_${id}_${timestamp}.jpg`;
}

module.exports = {
  downloadImage,
  isGoogleProfilePicture,
  generateProfileFilename
}; 