const multer = require('multer');
const path = require('path');
const fs = require('fs');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
const createUploadDirs = () => {
  const dirs = [
    path.join(__dirname, '../uploads/sheets'),
    path.join(__dirname, '../uploads/covers'),
    path.join(__dirname, '../uploads/previews'),
    path.join(__dirname, '../uploads/slips')
  ];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
};

createUploadDirs();

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    let uploadPath;
    switch (file.fieldname) {
      case 'pdf_file':
        uploadPath = path.join(__dirname, '../uploads/sheets');
        req.uploadPath = uploadPath;
        break;

      case 'preview_images':
        uploadPath = path.join(__dirname, '../uploads/previews');
        req.uploadPath = uploadPath;
        break;
      case 'payment_slip':
        uploadPath = path.join(__dirname, '../uploads/slips');
        req.uploadPath = uploadPath;
        break;
      case 'slipImage':
        uploadPath = path.join(__dirname, '../uploads/slips');
        req.uploadPath = uploadPath;
        break;
      default:
        uploadPath = path.join(__dirname, '../uploads/misc');
        req.uploadPath = uploadPath;
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö decode ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const decodeThaiFilename = (filename) => {
      try {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Buffer ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô
        if (Buffer.isBuffer(filename)) {
          filename = filename.toString('utf8');
        }
        
        // ‡∏•‡∏ö null bytes
        filename = filename.replace(/\0/g, '').trim();
        
        // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ pattern ‡∏Ç‡∏≠‡∏á encoding ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á decode
        if (filename.includes('√†¬∏') || filename.includes('√†¬π') || filename.includes('√†¬∫')) {
          // ‡∏•‡∏≠‡∏á decode ‡∏à‡∏≤‡∏Å latin1 ‡πÄ‡∏õ‡πá‡∏ô utf8
          try {
            const decoded = Buffer.from(filename, 'latin1').toString('utf8');
            if (decoded && !decoded.includes('√†¬∏') && !decoded.includes('√†¬π') && !decoded.includes('√†¬∫')) {
              // console.log('‚úÖ Successfully decoded Thai filename:', filename, '‚Üí', decoded);
              return decoded;
            }
          } catch (e) {
            // console.log('‚ùå Failed to decode latin1:', e.message);
          }
          
          // ‡∏•‡∏≠‡∏á decode ‡∏à‡∏≤‡∏Å binary ‡πÄ‡∏õ‡πá‡∏ô utf8
          try {
            const decoded = Buffer.from(filename, 'binary').toString('utf8');
            if (decoded && !decoded.includes('√†¬∏') && !decoded.includes('√†¬π') && !decoded.includes('√†¬∫')) {
              // console.log('‚úÖ Successfully decoded Thai filename:', filename, '‚Üí', decoded);
              return decoded;
            }
          } catch (e) {
            // console.log('‚ùå Failed to decode binary:', e.message);
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ decode ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
        // console.log('üìù Using original filename:', filename);
        return filename;
      } catch (error) {
        console.error('‚ùå Error decoding filename:', error);
        return filename;
      }
    };
    
    // Decode ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    let originalName = decodeThaiFilename(file.originalname);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const uploadPath = req.uploadPath || path.join(__dirname, '../uploads/misc');
    const filePath = path.join(uploadPath, originalName);
    
    if (fs.existsSync(filePath)) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
      const extension = path.extname(originalName);
      const nameWithoutExt = path.basename(originalName, extension);
      const timestamp = Date.now();
      const newFileName = `${nameWithoutExt}_${timestamp}${extension}`;
      // console.log('üìù File exists, using new name:', newFileName);
      cb(null, newFileName);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
      // console.log('üìù Using filename:', originalName);
      cb(null, originalName);
    }
  }
});

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ file filter
const fileFilter = (req, file, cb) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
  if (file.fieldname === 'pdf_file') {
    if (file.mimetype === 'application/pdf') {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only PDF files are allowed.'), false);
    }
  } else if (file.fieldname === 'preview_images') {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only image files are allowed.'), false);
    }
  } else if (file.fieldname === 'payment_slip') {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only image files are allowed.'), false);
    }
  } else {
    cb(null, true);
  }
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ limits
const limits = {
  fileSize: 50 * 1024 * 1024, // 50MB (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å 10MB)
  files: 10,
  fieldSize: 10 * 1024 * 1024, // 10MB for text fields
  fieldNameSize: 100, // 100 bytes for field names
  fields: 50 // max number of non-file fields
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á multer instance
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: limits
});

module.exports = upload;

// Middleware: enforce per-field logical size caps (after multer saves metadata)
// Usage: place after multer handler and before main controller
module.exports.enforceFieldLimits = (rules = {}) => {
  // rules example: { pdf_file: 50*1024*1024, preview_images: 2*1024*1024, payment_slip: 5*1024*1024, slipImage: 5*1024*1024 }
  return (req, res, next) => {
    try {
      const files = [];
      if (req.file) files.push(req.file);
      if (req.files) {
        if (Array.isArray(req.files)) files.push(...req.files);
        else Object.values(req.files).forEach(arr => Array.isArray(arr) && files.push(...arr));
      }
      for (const f of files) {
        const limit = rules[f.fieldname];
        if (limit && f.size > limit) {
          return res.status(400).json({ success: false, message: `‡πÑ‡∏ü‡∏•‡πå ${f.fieldname} ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (${Math.round(limit/1024/1024)}MB)` });
        }
      }
      next();
    } catch (e) {
      return res.status(500).json({ success: false, message: 'Upload limit check failed', error: e.message });
    }
  };
};