const express = require('express');
const router = express.Router();
// Debug logger (disabled in production)
const debug = (...args) => { if (process.env.NODE_ENV !== 'production') console.log(...args); };
const { protect, requireAdmin } = require('../middleware/auth');
const { prisma } = require('../config/database');
const {
  getDashboardStats,
  getUsers,
  getUserById,
  getUserAnalytics,
  getSystemHealth,
  getSheetAnalytics,
  getOrderAnalytics,
  getRevenueAnalytics,
  banUser,
  unbanUser,
  deleteUser,
  getSheets,
  getSheetById,
  approveSheet,
  rejectSheet,
  deleteSheet,
  getOrders,
  getOrderById,
  updateOrderStatus
} = require('../controllers/adminController');

const {
  getFinanceStats,
  getPendingPayouts,
  getRecentTransactions,
  getPayoutHistory,
  processPayout,
  updateCommissionRate,
  updatePayoutSchedule,
  getSystemSettings,
  updateSystemSettings
} = require('../controllers/financeController');

// Discount codes admin
const {
  listDiscounts,
  createDiscount,
  updateDiscount,
  toggleDiscount,
  deleteDiscount,
} = require('../controllers/discountController');

// Admin Study Group management
const {
  adminListGroups,
  adminGetGroupById,
  adminUpdateGroupStatus,
  adminDeleteGroup,
} = require('../controllers/adminGroupController');

// Dashboard routes
router.get('/dashboard/stats', protect, requireAdmin, getDashboardStats);

// User management routes
router.get('/users', protect, requireAdmin, getUsers);
router.get('/users/:id', protect, requireAdmin, getUserById);
router.post('/users/:id/ban', protect, requireAdmin, banUser);
router.post('/users/:id/unban', protect, requireAdmin, unbanUser);
router.delete('/users/:id', protect, requireAdmin, deleteUser);

// Sheet management routes
router.get('/sheets', protect, requireAdmin, getSheets);
router.get('/sheets/:id', protect, requireAdmin, getSheetById);
router.post('/sheets/:id/approve', protect, requireAdmin, approveSheet);
router.post('/sheets/:id/reject', protect, requireAdmin, rejectSheet);
router.delete('/sheets/:id', protect, requireAdmin, deleteSheet);

// Order management routes
router.get('/orders', protect, requireAdmin, getOrders);
router.get('/orders/:id', protect, requireAdmin, getOrderById);
router.put('/orders/:id/status', protect, requireAdmin, updateOrderStatus);

// Analytics routes
router.get('/analytics/users', (req, res, next) => {
  debug('üîç Analytics route hit:', req.method, req.originalUrl);
  debug('üîç Headers:', req.headers);
  next();
}, protect, requireAdmin, getUserAnalytics);

router.get('/analytics/sheets', protect, requireAdmin, getSheetAnalytics);
router.get('/analytics/orders', protect, requireAdmin, getOrderAnalytics);
router.get('/analytics/revenue', protect, requireAdmin, getRevenueAnalytics);

// System health routes
router.get('/system/health', protect, requireAdmin, getSystemHealth);

// Finance management routes
router.get('/finance/stats', protect, requireAdmin, getFinanceStats);
router.get('/finance/pending-payouts', protect, requireAdmin, getPendingPayouts);
router.get('/finance/recent-transactions', protect, requireAdmin, getRecentTransactions);
router.get('/finance/payout-history', protect, requireAdmin, getPayoutHistory);
router.post('/finance/payouts/:id/process', protect, requireAdmin, processPayout);
router.put('/finance/commission-rate', protect, requireAdmin, updateCommissionRate);
router.put('/finance/payout-schedule', protect, requireAdmin, updatePayoutSchedule);
router.get('/finance/settings', protect, requireAdmin, getSystemSettings);
router.get('/settings', protect, requireAdmin, getSystemSettings);
router.put('/settings', protect, requireAdmin, updateSystemSettings);

// Discount codes management
router.get('/discounts', protect, requireAdmin, listDiscounts);
router.post('/discounts', protect, requireAdmin, createDiscount);
router.put('/discounts/:id', protect, requireAdmin, updateDiscount);
router.put('/discounts/:id/toggle', protect, requireAdmin, toggleDiscount);
router.delete('/discounts/:id', protect, requireAdmin, deleteDiscount);

// Study Groups admin routes
router.get('/groups', protect, requireAdmin, adminListGroups);
router.get('/groups/:id', protect, requireAdmin, adminGetGroupById);
router.put('/groups/:id/status', protect, requireAdmin, adminUpdateGroupStatus);
router.delete('/groups/:id', protect, requireAdmin, adminDeleteGroup);

// Helper to support both legacy :payoutId and new :sellerId params
const getSellerIdParam = (req) => {
  const raw = req.params.sellerId ?? req.params.payoutId;
  const id = parseInt(raw, 10);
  return Number.isNaN(id) ? null : id;
};

// Unified handler: ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏Ç‡∏≠‡∏á seller
const getWeeklyHistoryHandler = async (req, res) => {
  try {
    const sellerId = getSellerIdParam(req);
  debug('üîç Weekly history endpoint (sellerId):', sellerId, '| params:', req.params);
    if (!sellerId) {
      return res.status(400).json({ success: false, message: 'sellerId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller ‡∏à‡∏≤‡∏Å ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    const seller = await prisma.seller.findFirst({
      where: { id: sellerId },
      include: {
        user: {
          select: {
            fullName: true,
            email: true
          }
        }
      }
    });

    if (!seller) {
      return res.status(404).json({ 
        error: 'Seller not found', 
        message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${sellerId}` 
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á seller ‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á payout ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const payouts = await prisma.payout.findMany({
      where: {
        sellerId: seller.id,
        status: 'COMPLETED' // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      },
      orderBy: {
        confirmedAt: 'desc'
      }
    });

  debug('üîç Found completed payouts:', payouts.length);
    
    // helper: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 09:00 - ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 08:59:59.999)
    const getWeeklyWindow = (baseDate) => {
      const ref = new Date(baseDate);
      const dayOfWeek = ref.getDay(); // 0=Sun,1=Mon,...
      const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
      const start = new Date(ref);
      start.setDate(ref.getDate() - daysToMonday);
      start.setHours(9, 0, 0, 0);

      const end = new Date(start);
      end.setDate(start.getDate() + 7);
      end.setHours(8, 59, 59, 999);
      return { start, end };
    };

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payout ‡πÄ‡∏õ‡πá‡∏ô weeklyHistory format ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏±‡πâ‡∏ô
    const weeklyHistory = await Promise.all(payouts.map(async (payout) => {
      const refTime = payout.confirmedAt || payout.createdAt || new Date();
      const { start, end } = getWeeklyWindow(refTime);

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ VERIFIED)
  const orders = await prisma.order.findMany({
        where: {
          sellerId: seller.id,
          status: 'VERIFIED',
          createdAt: {
            gte: start,
            lte: end,
          }
        },
        select: { amount: true }
      });

      const totalOrders = orders.length;
      const totalAmountInWeek = orders.reduce((sum, o) => sum + (o.amount || 0), 0);

      return {
        id: payout.id,
        weekStart: start.toISOString().split('T')[0],
        weekEnd: end.toISOString().split('T')[0],
        totalOrders,
        totalAmount: payout.amount ?? totalAmountInWeek,
        commission: payout.commission ?? 0,
        netAmount: payout.netAmount ?? Math.max((payout.amount || 0) - (payout.commission || 0), 0),
        confirmedAt: payout.confirmedAt ? payout.confirmedAt.toISOString().split('T')[0] : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        status: payout.status,
        reference: `PAY${payout.id.toString().padStart(3, '0')}`
      };
    }));
    
  debug('üîç Weekly history from payouts:', JSON.stringify(weeklyHistory, null, 2));

  res.json({
      success: true,
      data: {
        seller: {
          id: seller.id,
          name: seller.penName,
          email: seller.user.email
        },
        weeklyHistory
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching weekly history:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching weekly history'
    });
  }
};

// New route (preferred)
router.get('/payouts/seller/:sellerId/weekly-history', protect, requireAdmin, getWeeklyHistoryHandler);
// Legacy route (kept for backward compatibility)
router.get('/payouts/:payoutId/weekly-history', protect, requireAdmin, getWeeklyHistoryHandler);

// Unified handler: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏Ç‡∏≠‡∏á seller
const getPayoutDetailsHandler = async (req, res) => {
  try {
    const sellerId = getSellerIdParam(req);
  debug('üîç Payout details endpoint (sellerId):', sellerId, '| params:', req.params);
    if (!sellerId) {
      return res.status(400).json({ error: 'Bad request', message: 'sellerId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller
    const seller = await prisma.seller.findFirst({
      where: { id: sellerId },
      include: {
        user: {
          select: {
            fullName: true,
            email: true
          }
        }
      }
    });
    
  debug('üîç Seller found:', seller ? 'Yes' : 'No');
    if (seller) {
  debug('üîç Seller details:', {
        id: seller.id,
        penName: seller.penName,
        userName: seller.user.fullName,
        userEmail: seller.user.email
      });
    }

  if (!seller) {
      return res.status(404).json({ 
        error: 'Seller not found', 
    message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${sellerId}` 
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 09:00 - ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:59)
    const now = new Date();
    const monday = new Date(now);
    const dayOfWeek = now.getDay();
    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    
    monday.setDate(now.getDate() - daysToMonday);
    monday.setHours(9, 0, 0, 0);
    
    const nextMonday = new Date(monday);
    nextMonday.setDate(monday.getDate() + 7);
    nextMonday.setHours(8, 59, 59, 999);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 09:00 - ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:59)
  debug('üîç Fetching orders for seller ID:', seller.id);
    debug('üìÖ Weekly period:', monday.toISOString(), 'to', nextMonday.toISOString());
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
    const orders = await prisma.order.findMany({
      where: {
        sellerId: seller.id,
        status: 'VERIFIED'
        // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î paymentStatus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
      },
      include: {
        user: {
          select: {
            fullName: true,
            email: true
          }
        },
        sheet: {
          select: {
            title: true,
            price: true,
            subjectNameJSON: true // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });
    
  debug('üîç Orders found:', orders.length);
    if (orders.length > 0) {
  debug('üîç First order:', {
        id: orders[0].id,
        amount: orders[0].amount,
        createdAt: orders[0].createdAt
      });
  debug('üîç Last order:', {
        id: orders[orders.length - 1].id,
        amount: orders[orders.length - 1].amount,
        createdAt: orders[orders.length - 1].createdAt
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    let weeklyOrders = orders.length;
    let weeklyFreeSheets = orders.filter(order => order.amount === 0).length;
    let weeklyPaidSheets = orders.filter(order => order.amount > 0).length;
    
    // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå = ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó‡∏Ç‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô)
    let weeklyAmount = orders.reduce((sum, order) => sum + order.amount, 0);
    
    // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå = ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ 15% ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    let weeklyCommission = orders.reduce((sum, order) => {
      if (order.amount === 0) return sum; // ‡∏ä‡∏µ‡∏ó‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô
      return sum + Math.round((order.amount * 0.15) * 100) / 100; // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô 15%
    }, 0);
    
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå = ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó‡∏Ç‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ (‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    let weeklySellerAmount = weeklyAmount - weeklyCommission;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
    const allOrders = await prisma.order.findMany({
      where: { sellerId: seller.id },
      select: { amount: true }
    });
    
    const totalAllOrders = allOrders.length;
    const totalAllAmount = allOrders.reduce((sum, order) => sum + order.amount, 0);
    const totalAllCommission = allOrders.reduce((sum, order) => {
      if (order.amount === 0) return sum;
      return sum + Math.round((order.amount * 0.15) * 100) / 100;
    }, 0);
    const totalAllSellerAmount = totalAllAmount - totalAllCommission;
    
  debug('üí∞ Weekly calculation results:');
  debug('üí∞ Weekly Orders:', weeklyOrders);
  debug('üí∞ Weekly Free Sheets:', weeklyFreeSheets);
  debug('üí∞ Weekly Paid Sheets:', weeklyPaidSheets);
  debug('üí∞ Weekly Amount:', weeklyAmount);
  debug('üí∞ Weekly Commission (15%):', weeklyCommission);
  debug('üí∞ Weekly Seller Amount:', weeklySellerAmount);
    
  debug('üí∞ All-time totals:');
  debug('üí∞ Total All Orders:', totalAllOrders);
  debug('üí∞ Total All Amount:', totalAllAmount);
  debug('üí∞ Total All Commission:', totalAllCommission);
  debug('üí∞ Total All Seller Amount:', totalAllSellerAmount);
    
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® orderDetails
    let orderDetails = [];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á orderDetails ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    if (orders.length > 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á orderDetails
      orderDetails = orders.map((order, index) => {
      // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å subjectNameJSON ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà title
      let sheetTitle = order.sheet.title;
      try {
        if (order.sheet.subjectNameJSON) {
          const subjectData = JSON.parse(order.sheet.subjectNameJSON);
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
          if (subjectData.thai && subjectData.thai.trim()) {
            sheetTitle = subjectData.thai;
          } else if (subjectData.english && subjectData.english.trim()) {
            sheetTitle = subjectData.english;
          }
        }
      } catch (error) {
        debug('‚ö†Ô∏è Error parsing subjectNameJSON, using title:', error.message);
      }
      
      return {
        id: order.id,
        customerName: order.user.fullName,
        customerEmail: order.user.email,
        sheetTitle: sheetTitle, // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        amount: order.amount,
        commission: order.amount === 0 ? 0 : order.amount * 0.15, // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô 15%
        sellerAmount: order.amount === 0 ? 0 : order.amount * 0.85, // ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ 85%
        date: order.createdAt,
        isFree: order.amount === 0
      };
      });
      
  debug('üìã Order details created:', orderDetails.length);
  debug('üìã Free sheets in details:', orderDetails.filter(order => order.isFree).length);
  debug('üìã Paid sheets in details:', orderDetails.filter(order => !order.isFree).length);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      orderDetails.forEach((order, index) => {
  debug(`üìã Order ${index + 1}:`, {
          id: order.id,
          sheetTitle: order.sheetTitle,
          amount: order.amount,
          isFree: order.isFree
        });
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payout ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) - ‡πÉ‡∏ä‡πâ orderBy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const existingPayout = await prisma.payout.findFirst({
        where: { sellerId: seller.id },
        orderBy: { createdAt: 'desc' } // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      });

  debug('üîç Existing payout found:', existingPayout ? {
        id: existingPayout.id,
        status: existingPayout.status,
        confirmedAt: existingPayout.confirmedAt
      } : 'None');

      const payoutData = {
        id: sellerId,
        sellerName: seller.user.fullName,
        email: seller.user.email,
        bankName: seller.bankName || '',
        bankAccount: seller.bankAccount || '',
        accountName: seller.accountName || '',
        promptPayId: seller.promptPayId || '',
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
        amount: totalAllAmount, // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°)
        netAmount: totalAllSellerAmount, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏° 15% ‡πÅ‡∏•‡πâ‡∏ß)
        commission: totalAllCommission, // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (15% ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°)
        orders: totalAllOrders, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
        totalAllAmount: totalAllAmount,
        totalAllNetAmount: totalAllSellerAmount,
        totalAllCommission: totalAllCommission,
        totalAllOrders: totalAllOrders,
        lastPayout: existingPayout?.confirmedAt || null,
        status: existingPayout?.status || 'PENDING',
        orderDetails: orderDetails,
        slipImagePath: existingPayout?.slipImagePath || null,
      };

  debug('‚úÖ Sending response:', JSON.stringify(payoutData, null, 2));
    res.json(payoutData);
  } catch (error) {
    console.error('‚ùå Error fetching payout data:', error);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
};

// New route (preferred)
router.get('/payouts/seller/:sellerId', protect, requireAdmin, getPayoutDetailsHandler);
// Legacy route (kept for backward compatibility)
router.get('/payouts/:payoutId', protect, requireAdmin, getPayoutDetailsHandler);

// POST /api/admin/payouts/upload-slip - ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
const upload = require('../middleware/upload');
const { enforceFieldLimits } = require('../middleware/upload');
const uploadSlip = upload.single('slipImage');
const enforceSlipMax5MB = (req, res, next) => {
  const file = req.file;
  if (file && file.size > 5 * 1024 * 1024) {
    return res.status(400).json({ success: false, message: '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB' });
  }
  next();
};

// Error handling middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multer
const handleUploadError = (error, req, res, next) => {
  if (error instanceof require('multer').MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB'
      });
    }
    if (error.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }
  }
  next(error);
};

router.post('/payouts/upload-slip', protect, requireAdmin, uploadSlip, enforceSlipMax5MB, enforceFieldLimits({ slipImage: 5*1024*1024 }), handleUploadError, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.file) {
      return res.status(400).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î' 
      });
    }

    const slipFile = req.file;
  debug('üîç Slip file received:', {
      originalname: slipFile.originalname,
      filename: slipFile.filename,
      mimetype: slipFile.mimetype,
      size: slipFile.size
    });

    const { payoutId, sellerId, amount, uploadDate } = req.body;
  debug('üîç Request body:', { payoutId, sellerId, amount, uploadDate });



    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!payoutId || !sellerId || !amount) {
      return res.status(400).json({ 
        success: false, 
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if (!slipFile.mimetype.startsWith('image/')) {
      return res.status(400).json({ 
        success: false, 
        message: '‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)
    if (slipFile.size > 5 * 1024 * 1024) {
      return res.status(400).json({ 
        success: false, 
        message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB' 
      });
    }

    // multer ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á destination ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ filename ‡∏ó‡∏µ‡πà multer ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ
    const fileName = slipFile.filename; // multer ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
  debug('üîç File saved by multer:', {
      filename: fileName,
      path: slipFile.path,
      destination: slipFile.destination
    });

    // ‡∏´‡∏≤ payoutId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Payout
    const existingPayout = await prisma.payout.findFirst({
      where: {
        sellerId: parseInt(sellerId),
        status: 'COMPLETED'
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!existingPayout) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

  debug('üîç Found existing payout:', {
      id: existingPayout.id,
      sellerId: existingPayout.sellerId,
      status: existingPayout.status
    });

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    if (existingPayout.slipImagePath) {
      try {
        const oldPath = require('path').join(__dirname, '../uploads/slips', existingPayout.slipImagePath);
        require('fs').existsSync(oldPath) && require('fs').unlinkSync(oldPath);
      } catch (e) {
        debug('‚ö†Ô∏è Cannot remove old slip:', e.message);
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Payout
    const updatedPayout = await prisma.payout.update({
      where: {
        id: existingPayout.id
      },
      data: {
        slipImagePath: fileName,
        slipUploadDate: new Date(uploadDate),
        slipUploadedBy: req.user.id
      }
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á seller (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå lastPayoutDate ‡πÅ‡∏•‡∏∞ lastPayoutAmount ‡πÉ‡∏ô Seller model
    // ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á seller



    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        payoutId: updatedPayout.id,
        sellerId: updatedPayout.sellerId,
        amount: updatedPayout.amount,
        slipImagePath: updatedPayout.slipImagePath,
        uploadDate: updatedPayout.slipUploadDate
      }
    });

  } catch (error) {
    console.error('‚ùå Error uploading slip:', error);
    res.status(500).json({ 
      success: false, 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ',
      error: error.message 
    });
  }
});

// Unified handler: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á seller
const confirmTransferHandler = async (req, res) => {
  try {
    const sellerId = getSellerIdParam(req);
    const { status, confirmedAt } = req.body;

  debug('üîç Confirming transfer for seller ID:', sellerId);
  debug('üîç Request body:', req.body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!status || !confirmedAt) {
      return res.status(400).json({ 
        success: false, 
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
      });
    }

    if (!sellerId) {
      return res.status(400).json({ success: false, message: 'sellerId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller ‡πÅ‡∏•‡∏∞ orders ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    const seller = await prisma.seller.findUnique({
      where: { id: sellerId },
      include: {
        orders: {
          where: {
            status: 'VERIFIED'
          },
          select: {
            amount: true
          }
        }
      }
    });

    if (!seller) {
      return res.status(404).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢' 
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    const totalAmount = seller.orders.reduce((sum, order) => sum + order.amount, 0);
    const commission = Math.round((totalAmount * 0.15) * 100) / 100; // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const netAmount = totalAmount - commission;

  debug('üí∞ Transfer amounts:', { totalAmount, commission, netAmount });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Payout record ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ weekStart/weekEnd)
    const payoutRecord = await prisma.payout.create({
      data: {
  sellerId: sellerId,
        amount: totalAmount,
        netAmount: netAmount,
        commission: commission,
        status: status,
        confirmedAt: new Date(confirmedAt)
      }
    });

  debug('‚úÖ Transfer confirmed successfully');

    res.json({
      success: true,
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        payoutId: payoutRecord.id,
        status: status,
        confirmedAt: confirmedAt
      }
    });

  } catch (error) {
    console.error('‚ùå Error confirming transfer:', error);
    res.status(500).json({ 
      success: false, 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      error: error.message 
    });
  }
};

// New route (preferred)
router.put('/payouts/seller/:sellerId/confirm-transfer', protect, requireAdmin, confirmTransferHandler);
// Legacy route (kept for backward compatibility)
router.put('/payouts/:payoutId/confirm-transfer', protect, requireAdmin, confirmTransferHandler);

module.exports = router;